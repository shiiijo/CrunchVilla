System design tips

1. talk about web app bundling and why it is necessary and explain why it makes web app fast
and explain about lazy loading

2. ask which type of styling to use for the components. if your choosing anything above another, tell pros and cons of rejected styling methods
different ways to add css:
a. native css
b. inline css
c. sass / scss 
d. styled css (majorly used in react) - it is like jsx for css or writing css inside javscript
https://styled-components.com/ & https://styled-components.com/docs/basics
e. frameworks such as material UI , bootstrap , tailwind , chakra UI etc ..

3.talk about data handling methods & choose better when with proper reason


Important dev extensions
1. react dev tools
2. redux dev tools

Tailwind Css
- Css on the go (in the same files)
- reusability
- less bundle size(makes app faster)
- flexible UI (we can customize acc to our need) - it is not allowed in material UI

- tailwind css is library is installed with one more library it is postCss
- postCss converts class names of tailwind css to normal css which is unnderstandable by browser
- 'npx tailwindCss init' command will initialize our project to use tailwindCss
- above will create config file , in which we need to do tail wind configuration
- uses of tailwind
 - no duplication of css
 - easy to debug
 - code is less and easy to use
 - bundle size is small

- cons
 - it needs a decent learning before using
 - code grows horizontally because of many class names and reduces readbility


 Web app consits of two layers 
 - UI layer 
 - data layers
 we recieve data from external world(via api calls) , that data within the application are maintained by state mangment and props

(Data handling methods in webapp)
 1.Props Drilling:
  - passing data as props from upper componenets to childern componenet and so on to grand child in heirarchy and this whole chain is called as PD

  props drilling is not recommended , if we are sharing data across more components, alternative to this we will use
  context and redux store which makes data availability for all the componenets exists inside our app and data is maintained centrally
  example is user info

2.context 
  to achive this there are many libraries but react has its official library

3.Redux store
  - for large applications managing multiple contextswill become difficult.
  - previously in indudstries redux was in use , it was coomplex to setup and use & it needed initial learning about redux
  but redux has built its simpler package called redux toolkit which is user friendly & industry standard
  - more about why toolkit is introduced by redux https://redux-toolkit.js.org/introduction/getting-started#purpose

  - at the end of the day redux store is big javascript object & it can be acessed by all the componenets as store is central place
  - in context for multiple contexts we used to create different contexts but redux has everything in one big object
  - store(object) will further contain slices (user slice , cart slice ....)
  - if book is store , then pages are slices
  - we cannot directly modify the slices , we need to perform some action (eg : dispatch action to update slice it is known as "reducer"), it will call reducer function to
    to modify the slice data , this will give more control over data modification & extra layer of confirmation
  - "selector" is a function which used read slice data which is inside store , and UI element "subscribes" to the store 
     (it will make sure UI is always in auto-sync with the data which is stored in the slice)

  - we installed two libraries @reduxjs/toolkit and react-redux , 1st library is to install core redux library which independent of frameworks
    2nd library is to create bridge between redux and the react

  - "useSelector" is react hook we will use to read data from the store 


Testing :

when we use ```create react app``` , 
- internally it will use bundler to optimise
- creates componenets testing configuration
- 


we have not used ```create react app```, implemented everything individually
- for bundling , we used parcel
- for testing we will use react testing library , which uses jest internally

why we need testing?
- to test whether new feature or componenet is breaking any other existing feature or componenets.

types of testing :
- Manual testing - actual person checks functionality by spending time & effort. it is not efficient.
- Automated/Automation testing - code testing a code , eg: selenium
- End-to-End testing - it covers entire user journey - it uses headless browser to test everything , eg:playwright , cypress - it is replacement of manual testing
- Unit testing - it will test given unit / componenet working properly or not
- Integration testing - it will test the integration between components are working properly or not, eg:after adding items from body ,item is added to cart or not & its visibe in cart page

Jest 
- To test javascript code we use jest framework
- react testing library internally uses jest & react testing library is a child of testing library https://testing-library.com/docs/react-testing-library/intro/

Steps for configuration (for testing)
1. installed these two packages
 - ```npm install --save-dev @testing-library/react```
 - ```npm i -D jest``` (its a pre-requisite lib for testing-library/react)
2. create jest config file
 - used this command to create config file with configuartion ```npx jest --init```
 - we can use npm or npx , but we need to add config file only once so i have used npx command here (npx is used to execute the package for the first time & it will be one time work)
 - npm will only install package

 3. created test file
  - as per industry standard we will use '.test.js' as suffix for file name , eg 'sum.test.js'.
  - we can name it as 'sum.js' functionality wise it wont effect anything. it is just for good readiblity we will use '.test.js'